// http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
// https://crccalc.com

const CRC16_MODBUS_TABLE = [
  0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241, 0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
  0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40, 0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
  0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40, 0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
  0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641, 0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
  0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240, 0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
  0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41, 0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
  0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41, 0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
  0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640, 0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
  0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240, 0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
  0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41, 0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
  0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41, 0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
  0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640, 0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
  0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241, 0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
  0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40, 0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
  0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40, 0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
  0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641, 0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
];

const CRC16_CCITT_TABLE = [
  0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7, 0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
  0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6, 0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
  0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485, 0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
  0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4, 0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
  0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823, 0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
  0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12, 0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
  0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41, 0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
  0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70, 0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
  0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F, 0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
  0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E, 0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
  0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D, 0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
  0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C, 0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
  0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB, 0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
  0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A, 0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
  0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9, 0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
  0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8, 0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
];

const CRC64_TABLE = [
  0x00000000, 0x00000000, 0xB32E4CBE, 0x03A75F6F, 0xF4843657, 0xA840A05B, 0x47AA7AE9, 0xABE7FF34,
  0x7BD0C384, 0xFF8F5E33, 0xC8FE8F3A, 0xFC28015C, 0x8F54F5D3, 0x57CFFE68, 0x3C7AB96D, 0x5468A107,
  0xF7A18709, 0xFF1EBC66, 0x448FCBB7, 0xFCB9E309, 0x0325B15E, 0x575E1C3D, 0xB00BFDE0, 0x54F94352,
  0x8C71448D, 0x0091E255, 0x3F5F0833, 0x0336BD3A, 0x78F572DA, 0xA8D1420E, 0xCBDB3E64, 0xAB761D61,
  0x7D9BA138, 0x51336649, 0xCEB5ED86, 0x52943926, 0x891F976F, 0xF973C612, 0x3A31DBD1, 0xFAD4997D,
  0x064B62BC, 0xAEBC387A, 0xB5652E02, 0xAD1B6715, 0xF2CF54EB, 0x06FC9821, 0x41E11855, 0x055BC74E,
  0x8A3A2631, 0xAE2DDA2F, 0x39146A8F, 0xAD8A8540, 0x7EBE1066, 0x066D7A74, 0xCD905CD8, 0x05CA251B,
  0xF1EAE5B5, 0x51A2841C, 0x42C4A90B, 0x5205DB73, 0x056ED3E2, 0xF9E22447, 0xB6409F5C, 0xFA457B28,
  0xFB374270, 0xA266CC92, 0x48190ECE, 0xA1C193FD, 0x0FB37427, 0x0A266CC9, 0xBC9D3899, 0x098133A6,
  0x80E781F4, 0x5DE992A1, 0x33C9CD4A, 0x5E4ECDCE, 0x7463B7A3, 0xF5A932FA, 0xC74DFB1D, 0xF60E6D95,
  0x0C96C579, 0x5D7870F4, 0xBFB889C7, 0x5EDF2F9B, 0xF812F32E, 0xF538D0AF, 0x4B3CBF90, 0xF69F8FC0,
  0x774606FD, 0xA2F72EC7, 0xC4684A43, 0xA15071A8, 0x83C230AA, 0x0AB78E9C, 0x30EC7C14, 0x0910D1F3,
  0x86ACE348, 0xF355AADB, 0x3582AFF6, 0xF0F2F5B4, 0x7228D51F, 0x5B150A80, 0xC10699A1, 0x58B255EF,
  0xFD7C20CC, 0x0CDAF4E8, 0x4E526C72, 0x0F7DAB87, 0x09F8169B, 0xA49A54B3, 0xBAD65A25, 0xA73D0BDC,
  0x710D6441, 0x0C4B16BD, 0xC22328FF, 0x0FEC49D2, 0x85895216, 0xA40BB6E6, 0x36A71EA8, 0xA7ACE989,
  0x0ADDA7C5, 0xF3C4488E, 0xB9F3EB7B, 0xF06317E1, 0xFE599192, 0x5B84E8D5, 0x4D77DD2C, 0x5823B7BA,
  0x64B62BCA, 0xEBC387A1, 0xD7986774, 0xE864D8CE, 0x90321D9D, 0x438327FA, 0x231C5123, 0x40247895,
  0x1F66E84E, 0x144CD992, 0xAC48A4F0, 0x17EB86FD, 0xEBE2DE19, 0xBC0C79C9, 0x58CC92A7, 0xBFAB26A6,
  0x9317ACC3, 0x14DD3BC7, 0x2039E07D, 0x177A64A8, 0x67939A94, 0xBC9D9B9C, 0xD4BDD62A, 0xBF3AC4F3,
  0xE8C76F47, 0xEB5265F4, 0x5BE923F9, 0xE8F53A9B, 0x1C435910, 0x4312C5AF, 0xAF6D15AE, 0x40B59AC0,
  0x192D8AF2, 0xBAF0E1E8, 0xAA03C64C, 0xB957BE87, 0xEDA9BCA5, 0x12B041B3, 0x5E87F01B, 0x11171EDC,
  0x62FD4976, 0x457FBFDB, 0xD1D305C8, 0x46D8E0B4, 0x96797F21, 0xED3F1F80, 0x2557339F, 0xEE9840EF,
  0xEE8C0DFB, 0x45EE5D8E, 0x5DA24145, 0x464902E1, 0x1A083BAC, 0xEDAEFDD5, 0xA9267712, 0xEE09A2BA,
  0x955CCE7F, 0xBA6103BD, 0x267282C1, 0xB9C65CD2, 0x61D8F828, 0x1221A3E6, 0xD2F6B496, 0x1186FC89,
  0x9F8169BA, 0x49A54B33, 0x2CAF2504, 0x4A02145C, 0x6B055FED, 0xE1E5EB68, 0xD82B1353, 0xE242B407,
  0xE451AA3E, 0xB62A1500, 0x577FE680, 0xB58D4A6F, 0x10D59C69, 0x1E6AB55B, 0xA3FBD0D7, 0x1DCDEA34,
  0x6820EEB3, 0xB6BBF755, 0xDB0EA20D, 0xB51CA83A, 0x9CA4D8E4, 0x1EFB570E, 0x2F8A945A, 0x1D5C0861,
  0x13F02D37, 0x4934A966, 0xA0DE6189, 0x4A93F609, 0xE7741B60, 0xE174093D, 0x545A57DE, 0xE2D35652,
  0xE21AC882, 0x18962D7A, 0x5134843C, 0x1B317215, 0x169EFED5, 0xB0D68D21, 0xA5B0B26B, 0xB371D24E,
  0x99CA0B06, 0xE7197349, 0x2AE447B8, 0xE4BE2C26, 0x6D4E3D51, 0x4F59D312, 0xDE6071EF, 0x4CFE8C7D,
  0x15BB4F8B, 0xE788911C, 0xA6950335, 0xE42FCE73, 0xE13F79DC, 0x4FC83147, 0x52113562, 0x4C6F6E28,
  0x6E6B8C0F, 0x1807CF2F, 0xDD45C0B1, 0x1BA09040, 0x9AEFBA58, 0xB0476F74, 0x29C1F6E6, 0xB3E0301B,
  0xC96C5795, 0xD7870F42, 0x7A421B2B, 0xD420502D, 0x3DE861C2, 0x7FC7AF19, 0x8EC62D7C, 0x7C60F076,
  0xB2BC9411, 0x28085171, 0x0192D8AF, 0x2BAF0E1E, 0x4638A246, 0x8048F12A, 0xF516EEF8, 0x83EFAE45,
  0x3ECDD09C, 0x2899B324, 0x8DE39C22, 0x2B3EEC4B, 0xCA49E6CB, 0x80D9137F, 0x7967AA75, 0x837E4C10,
  0x451D1318, 0xD716ED17, 0xF6335FA6, 0xD4B1B278, 0xB199254F, 0x7F564D4C, 0x02B769F1, 0x7CF11223,
  0xB4F7F6AD, 0x86B4690B, 0x07D9BA13, 0x85133664, 0x4073C0FA, 0x2EF4C950, 0xF35D8C44, 0x2D53963F,
  0xCF273529, 0x793B3738, 0x7C097997, 0x7A9C6857, 0x3BA3037E, 0xD17B9763, 0x888D4FC0, 0xD2DCC80C,
  0x435671A4, 0x79AAD56D, 0xF0783D1A, 0x7A0D8A02, 0xB7D247F3, 0xD1EA7536, 0x04FC0B4D, 0xD24D2A59,
  0x3886B220, 0x86258B5E, 0x8BA8FE9E, 0x8582D431, 0xCC028477, 0x2E652B05, 0x7F2CC8C9, 0x2DC2746A,
  0x325B15E5, 0x75E1C3D0, 0x8175595B, 0x76469CBF, 0xC6DF23B2, 0xDDA1638B, 0x75F16F0C, 0xDE063CE4,
  0x498BD661, 0x8A6E9DE3, 0xFAA59ADF, 0x89C9C28C, 0xBD0FE036, 0x222E3DB8, 0x0E21AC88, 0x218962D7,
  0xC5FA92EC, 0x8AFF7FB6, 0x76D4DE52, 0x895820D9, 0x317EA4BB, 0x22BFDFED, 0x8250E805, 0x21188082,
  0xBE2A5168, 0x75702185, 0x0D041DD6, 0x76D77EEA, 0x4AAE673F, 0xDD3081DE, 0xF9802B81, 0xDE97DEB1,
  0x4FC0B4DD, 0x24D2A599, 0xFCEEF863, 0x2775FAF6, 0xBB44828A, 0x8C9205C2, 0x086ACE34, 0x8F355AAD,
  0x34107759, 0xDB5DFBAA, 0x873E3BE7, 0xD8FAA4C5, 0xC094410E, 0x731D5BF1, 0x73BA0DB0, 0x70BA049E,
  0xB86133D4, 0xDBCC19FF, 0x0B4F7F6A, 0xD86B4690, 0x4CE50583, 0x738CB9A4, 0xFFCB493D, 0x702BE6CB,
  0xC3B1F050, 0x244347CC, 0x709FBCEE, 0x27E418A3, 0x3735C607, 0x8C03E797, 0x841B8AB9, 0x8FA4B8F8,
  0xADDA7C5F, 0x3C4488E3, 0x1EF430E1, 0x3FE3D78C, 0x595E4A08, 0x940428B8, 0xEA7006B6, 0x97A377D7,
  0xD60ABFDB, 0xC3CBD6D0, 0x6524F365, 0xC06C89BF, 0x228E898C, 0x6B8B768B, 0x91A0C532, 0x682C29E4,
  0x5A7BFB56, 0xC35A3485, 0xE955B7E8, 0xC0FD6BEA, 0xAEFFCD01, 0x6B1A94DE, 0x1DD181BF, 0x68BDCBB1,
  0x21AB38D2, 0x3CD56AB6, 0x9285746C, 0x3F7235D9, 0xD52F0E85, 0x9495CAED, 0x6601423B, 0x97329582,
  0xD041DD67, 0x6D77EEAA, 0x636F91D9, 0x6ED0B1C5, 0x24C5EB30, 0xC5374EF1, 0x97EBA78E, 0xC690119E,
  0xAB911EE3, 0x92F8B099, 0x18BF525D, 0x915FEFF6, 0x5F1528B4, 0x3AB810C2, 0xEC3B640A, 0x391F4FAD,
  0x27E05A6E, 0x926952CC, 0x94CE16D0, 0x91CE0DA3, 0xD3646C39, 0x3A29F297, 0x604A2087, 0x398EADF8,
  0x5C3099EA, 0x6DE60CFF, 0xEF1ED554, 0x6E415390, 0xA8B4AFBD, 0xC5A6ACA4, 0x1B9AE303, 0xC601F3CB,
  0x56ED3E2F, 0x9E224471, 0xE5C37291, 0x9D851B1E, 0xA2690878, 0x3662E42A, 0x114744C6, 0x35C5BB45,
  0x2D3DFDAB, 0x61AD1A42, 0x9E13B115, 0x620A452D, 0xD9B9CBFC, 0xC9EDBA19, 0x6A978742, 0xCA4AE576,
  0xA14CB926, 0x613CF817, 0x1262F598, 0x629BA778, 0x55C88F71, 0xC97C584C, 0xE6E6C3CF, 0xCADB0723,
  0xDA9C7AA2, 0x9EB3A624, 0x69B2361C, 0x9D14F94B, 0x2E184CF5, 0x36F3067F, 0x9D36004B, 0x35545910,
  0x2B769F17, 0xCF112238, 0x9858D3A9, 0xCCB67D57, 0xDFF2A940, 0x67518263, 0x6CDCE5FE, 0x64F6DD0C,
  0x50A65C93, 0x309E7C0B, 0xE388102D, 0x33392364, 0xA4226AC4, 0x98DEDC50, 0x170C267A, 0x9B79833F,
  0xDCD7181E, 0x300F9E5E, 0x6FF954A0, 0x33A8C131, 0x28532E49, 0x984F3E05, 0x9B7D62F7, 0x9BE8616A,
  0xA707DB9A, 0xCF80C06D, 0x14299724, 0xCC279F02, 0x5383EDCD, 0x67C06036, 0xE0ADA173, 0x64673F59
];

const CRC32_TABLE: number[] = [];
for (let n = 0, c = 0; n < 256; n++) {
  c = n;
  for (let k = 0; k < 8; k++) {
    c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
  }
  CRC32_TABLE[n] = c >>> 0;
}
export function crc32(buf: Buffer, offset?: number, length?: number) {
  let crc = 0 ^ (-1);
  for (let i = (offset || 0); i < (length || buf.length); i++) {
    crc = (crc >>> 8) ^ CRC32_TABLE[(crc ^ buf[i]) & 0xFF];
  }
  return (crc ^ -1) >>> 0;
}

export function crc16modbus(buf: Buffer, offset?: number, length?: number) {
  let crc = 0xFFFF;
  for (let i = (offset || 0); i < (length || buf.length); i++) {
    crc = (crc >>> 8) ^ CRC16_MODBUS_TABLE[(crc ^ buf[i]) & 0xFF];
  }
  return (crc & 0xFFFF) >>> 0;
}

export function crc16ccitt(buf: Buffer, offset?: number, length?: number) {
  let crc = 0xFFFF;
  for (let i = (offset || 0); i < (length || buf.length); i++) {
    crc = (crc << 8) ^ CRC16_CCITT_TABLE[((crc >>> 8) ^ buf[i]) & 0xFF];
  }
  return (crc & 0xFFFF) >>> 0;
}

export function crc64(buf: Buffer, offset?: number, length?: number) {
  let crc1 = 0 ^ (-1);
  let crc2 = 0 ^ (-1);
  for (let i = (offset || 0); i < (length || buf.length); i++) {
    const x = (crc1 ^ buf[i]) & 0xFF;
    crc1 = (crc1 >>> 8) | ((crc2 & 0xFF) << 24);
    crc2 = crc2 >>> 8;
    crc1 = crc1 ^ CRC64_TABLE[2 * x + 1];
    crc2 = crc2 ^ CRC64_TABLE[2 * x];
  }
  crc1 = (crc1 ^ -1) >>> 0;
  crc2 = (crc2 ^ -1) >>> 0;
  return [crc2, crc1];
}

const MOD_ADLER = 65521;
export function adler32(buf: Buffer, offset?: number, length?: number) {
  let a = 1;
  let b = 0;
  for (let i = (offset || 0); i < (length || buf.length); i++) {
    a = (a + buf[i]) % MOD_ADLER;
    b = (b + a) % MOD_ADLER;
  }
  return ((b << 16) | a) >>> 0;
}

// export function crc32str(str: string) {
//   let crc = 0 ^ (-1);
//   for (let i = 0; i < str.length; i++) {
//     crc = (crc >>> 8) ^ CRC32_TABLE[(crc ^ str.charCodeAt(i)) & 0xFF];
//   }
//   return (crc ^ (-1)) >>> 0;
// }

// console.log(crc32(Buffer.from('test')).toString(16));
// console.log(crc16ccitt(Buffer.from('test')).toString(16));
// console.log(crc16modbus(Buffer.from('test')).toString(16));
